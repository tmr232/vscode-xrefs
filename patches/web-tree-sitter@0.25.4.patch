diff --git a/web-tree-sitter.d.ts b/web-tree-sitter.d.ts
index ec65825c845da1a0a46fc1ea5bd473c03f628634..49b0525e85c15d7ab344f8818fc9c67088925979 100644
--- a/web-tree-sitter.d.ts
+++ b/web-tree-sitter.d.ts
@@ -1,60 +1,60 @@
 declare module 'web-tree-sitter' {
-  /**
-   * A position in a multi-line text document, in terms of rows and columns.
-   *
-   * Rows and columns are zero-based.
-   */
-  export interface Point {
-	  /** The zero-based row number. */
-	  row: number;
-	  /** The zero-based column number. */
-	  column: number;
-  }
-  /**
-   *  A range of positions in a multi-line text document, both in terms of bytes
-   *  and of rows and columns.
-   */
-  export interface Range {
-	  /** The start position of the range. */
-	  startPosition: Point;
-	  /** The end position of the range. */
-	  endPosition: Point;
-	  /** The start index of the range. */
-	  startIndex: number;
-	  /** The end index of the range. */
-	  endIndex: number;
-  }
-  /**
-   * A summary of a change to a text document.
-   */
-  export interface Edit {
-	  /** The start position of the change. */
-	  startPosition: Point;
-	  /** The end position of the change before the edit. */
-	  oldEndPosition: Point;
-	  /** The end position of the change after the edit. */
-	  newEndPosition: Point;
-	  /** The start index of the change. */
-	  startIndex: number;
-	  /** The end index of the change before the edit. */
-	  oldEndIndex: number;
-	  /** The end index of the change after the edit. */
-	  newEndIndex: number;
-  }
-  /**
-   * A callback for parsing that takes an index and point, and should return a string.
-   */
-  export type ParseCallback = (index: number, position: Point) => string | undefined;
-  /**
-	* A callback that receives the parse state during parsing.
-	*/
-  export type ProgressCallback = (progress: ParseState) => boolean;
-  /**
-   * A callback for logging messages.
-   *
-   * If `isLex` is `true`, the message is from the lexer, otherwise it's from the parser.
-   */
-  export type LogCallback = (message: string, isLex: boolean) => void;
+	/**
+	 * A position in a multi-line text document, in terms of rows and columns.
+	 *
+	 * Rows and columns are zero-based.
+	 */
+	export interface Point {
+		/** The zero-based row number. */
+		row: number;
+		/** The zero-based column number. */
+		column: number;
+	}
+	/**
+	 *  A range of positions in a multi-line text document, both in terms of bytes
+	 *  and of rows and columns.
+	 */
+	export interface Range {
+		/** The start position of the range. */
+		startPosition: Point;
+		/** The end position of the range. */
+		endPosition: Point;
+		/** The start index of the range. */
+		startIndex: number;
+		/** The end index of the range. */
+		endIndex: number;
+	}
+	/**
+	 * A summary of a change to a text document.
+	 */
+	export interface Edit {
+		/** The start position of the change. */
+		startPosition: Point;
+		/** The end position of the change before the edit. */
+		oldEndPosition: Point;
+		/** The end position of the change after the edit. */
+		newEndPosition: Point;
+		/** The start index of the change. */
+		startIndex: number;
+		/** The end index of the change before the edit. */
+		oldEndIndex: number;
+		/** The end index of the change after the edit. */
+		newEndIndex: number;
+	}
+	/**
+	 * A callback for parsing that takes an index and point, and should return a string.
+	 */
+	export type ParseCallback = (index: number, position: Point) => string | undefined;
+	/**
+	  * A callback that receives the parse state during parsing.
+	  */
+	export type ProgressCallback = (progress: ParseState) => boolean;
+	/**
+	 * A callback for logging messages.
+	 *
+	 * If `isLex` is `true`, the message is from the lexer, otherwise it's from the parser.
+	 */
+	export type LogCallback = (message: string, isLex: boolean) => void;
 	/**
 	 * Options for parsing
 	 *
@@ -133,7 +133,7 @@ declare module 'web-tree-sitter' {
 		 * You can optionally pass in options to configure the WASM module, the most common
 		 * one being `locateFile` to help the module find the `.wasm` file.
 		 */
-		static init(moduleOptions?: EmscriptenModule): Promise<void>;
+		static init(moduleOptions?: Partial<EmscriptenModule>): Promise<void>;
 		/**
 		 * Create a new parser.
 		 */
@@ -1024,7 +1024,7 @@ declare module 'web-tree-sitter' {
 		[Symbol.iterator](): Iterator<string>;
 	}
 
-	export {};
+	export { };
 }
 
 //# sourceMappingURL=web-tree-sitter.d.ts.map
\ No newline at end of file
